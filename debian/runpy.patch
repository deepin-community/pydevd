Description: Patch local copy of runpy.py to match upstream's vendored version
 This patch is based on the changes upstream has made to
 /var/lib/python3.10/runpy.py to make it work with pydevd.
 .
 We use this patch on a copy of /var/lib/python3.11/runpy.py rather than
 using upstream's vendored copy to ensure that we always have an up-to-date
 version of runpy.py.
Forwarded: not-needed
Author: Julian Gilbey <jdg@debian.org>
Last-Update: 2023-10-22


--- a/_pydevd_bundle/pydevd_runpy.py	2023-10-22 16:35:25.622487175 +0100
+++ b/_pydevd_bundle/pydevd_runpy.py	2023-10-22 16:35:42.250308770 +0100
@@ -1,4 +1,10 @@
-"""runpy.py - locating and running Python code using the module namespace
+"""
+Vendored copy of runpy from the standard library.
+
+It's vendored so that we can properly ignore it when used to start user code
+while still making it possible for the user to debug runpy itself.
+
+runpy.py - locating and running Python code using the module namespace
 
 Provides support for locating and running Python scripts using the Python
 module namespace instead of the native filesystem.
@@ -23,6 +29,35 @@
 # avoid 'import types' just for ModuleType
 ModuleType = type(sys)
 
+
+# Note: fabioz: Don't use pkgutil (when handling caught exceptions we could end up
+# showing exceptions in pkgutil.get_imported (specifically the KeyError), so,
+# create a copy of the function we need to properly ignore this exception when
+# running the program.
+def pkgutil_get_importer(path_item):
+    """Retrieve a finder for the given path item
+
+    The returned finder is cached in sys.path_importer_cache
+    if it was newly created by a path hook.
+
+    The cache (or part of it) can be cleared manually if a
+    rescan of sys.path_hooks is necessary.
+    """
+    try:
+        importer = sys.path_importer_cache[path_item]
+    except KeyError:
+        for path_hook in sys.path_hooks:
+            try:
+                importer = path_hook(path_item)
+                sys.path_importer_cache.setdefault(path_item, importer)
+                break
+            except ImportError:
+                pass
+        else:
+            importer = None
+    return importer
+
+
 class _TempModule(object):
     """Temporarily replace a module in sys.modules with an empty namespace"""
     def __init__(self, mod_name):
@@ -277,8 +312,7 @@
     if run_name is None:
         run_name = "<run_path>"
     pkg_name = run_name.rpartition(".")[0]
-    from pkgutil import get_importer
-    importer = get_importer(path_name)
+    importer = pkgutil_get_importer(path_name)
     # Trying to avoid importing imp so as to not consume the deprecation warning.
     is_NullImporter = False
     if type(importer).__module__ == 'imp':
